// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Governance rule over a given scope
func LookupManagementGroupGovernanceRule(ctx *pulumi.Context, args *LookupManagementGroupGovernanceRuleArgs, opts ...pulumi.InvokeOption) (*LookupManagementGroupGovernanceRuleResult, error) {
	var rv LookupManagementGroupGovernanceRuleResult
	err := ctx.Invoke("azure-native:security/v20220101preview:getManagementGroupGovernanceRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupManagementGroupGovernanceRuleArgs struct {
	// Azure Management Group ID
	ManagementGroupId string `pulumi:"managementGroupId"`
	// The governance rule key - unique key for the standard governance rule (GUID)
	RuleId string `pulumi:"ruleId"`
}

// Governance rule over a given scope
type LookupManagementGroupGovernanceRuleResult struct {
	// Description of the governance rule
	Description *string `pulumi:"description"`
	// Display name of the governance rule
	DisplayName string `pulumi:"displayName"`
	// Excluded scopes, filter out the descendants of the scope (on management scopes)
	ExcludedScopes []string `pulumi:"excludedScopes"`
	// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
	GovernanceEmailNotification *GovernanceRuleEmailNotificationResponse `pulumi:"governanceEmailNotification"`
	// Resource Id
	Id string `pulumi:"id"`
	// Defines whether the rule is management scope rule (master connector as a single scope or management scope)
	IncludeMemberScopes *bool `pulumi:"includeMemberScopes"`
	// Defines whether the rule is active/inactive
	IsDisabled *bool `pulumi:"isDisabled"`
	// Defines whether there is a grace period on the governance rule
	IsGracePeriod *bool `pulumi:"isGracePeriod"`
	// The governance rule metadata
	Metadata *GovernanceRuleMetadataResponse `pulumi:"metadata"`
	// Resource name
	Name string `pulumi:"name"`
	// The owner source for the governance rule - e.g. Manually by user@contoso.com - see example
	OwnerSource GovernanceRuleOwnerSourceResponse `pulumi:"ownerSource"`
	// Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
	RemediationTimeframe *string `pulumi:"remediationTimeframe"`
	// The governance rule priority, priority to the lower number. Rules with the same priority on the same subscription will not be allowed
	RulePriority int `pulumi:"rulePriority"`
	// The rule type of the governance rule, defines the source of the rule e.g. Integrated
	RuleType string `pulumi:"ruleType"`
	// The governance rule source, what the rule affects, e.g. Assessments
	SourceResourceType string `pulumi:"sourceResourceType"`
	// The tenantId (GUID)
	TenantId string `pulumi:"tenantId"`
	// Resource type
	Type string `pulumi:"type"`
}

func LookupManagementGroupGovernanceRuleOutput(ctx *pulumi.Context, args LookupManagementGroupGovernanceRuleOutputArgs, opts ...pulumi.InvokeOption) LookupManagementGroupGovernanceRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupManagementGroupGovernanceRuleResult, error) {
			args := v.(LookupManagementGroupGovernanceRuleArgs)
			r, err := LookupManagementGroupGovernanceRule(ctx, &args, opts...)
			var s LookupManagementGroupGovernanceRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupManagementGroupGovernanceRuleResultOutput)
}

type LookupManagementGroupGovernanceRuleOutputArgs struct {
	// Azure Management Group ID
	ManagementGroupId pulumi.StringInput `pulumi:"managementGroupId"`
	// The governance rule key - unique key for the standard governance rule (GUID)
	RuleId pulumi.StringInput `pulumi:"ruleId"`
}

func (LookupManagementGroupGovernanceRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagementGroupGovernanceRuleArgs)(nil)).Elem()
}

// Governance rule over a given scope
type LookupManagementGroupGovernanceRuleResultOutput struct{ *pulumi.OutputState }

func (LookupManagementGroupGovernanceRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagementGroupGovernanceRuleResult)(nil)).Elem()
}

func (o LookupManagementGroupGovernanceRuleResultOutput) ToLookupManagementGroupGovernanceRuleResultOutput() LookupManagementGroupGovernanceRuleResultOutput {
	return o
}

func (o LookupManagementGroupGovernanceRuleResultOutput) ToLookupManagementGroupGovernanceRuleResultOutputWithContext(ctx context.Context) LookupManagementGroupGovernanceRuleResultOutput {
	return o
}

// Description of the governance rule
func (o LookupManagementGroupGovernanceRuleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of the governance rule
func (o LookupManagementGroupGovernanceRuleResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Excluded scopes, filter out the descendants of the scope (on management scopes)
func (o LookupManagementGroupGovernanceRuleResultOutput) ExcludedScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) []string { return v.ExcludedScopes }).(pulumi.StringArrayOutput)
}

// The email notifications settings for the governance rule, states whether to disable notifications for mangers and owners
func (o LookupManagementGroupGovernanceRuleResultOutput) GovernanceEmailNotification() GovernanceRuleEmailNotificationResponsePtrOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) *GovernanceRuleEmailNotificationResponse {
		return v.GovernanceEmailNotification
	}).(GovernanceRuleEmailNotificationResponsePtrOutput)
}

// Resource Id
func (o LookupManagementGroupGovernanceRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Defines whether the rule is management scope rule (master connector as a single scope or management scope)
func (o LookupManagementGroupGovernanceRuleResultOutput) IncludeMemberScopes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) *bool { return v.IncludeMemberScopes }).(pulumi.BoolPtrOutput)
}

// Defines whether the rule is active/inactive
func (o LookupManagementGroupGovernanceRuleResultOutput) IsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) *bool { return v.IsDisabled }).(pulumi.BoolPtrOutput)
}

// Defines whether there is a grace period on the governance rule
func (o LookupManagementGroupGovernanceRuleResultOutput) IsGracePeriod() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) *bool { return v.IsGracePeriod }).(pulumi.BoolPtrOutput)
}

// The governance rule metadata
func (o LookupManagementGroupGovernanceRuleResultOutput) Metadata() GovernanceRuleMetadataResponsePtrOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) *GovernanceRuleMetadataResponse { return v.Metadata }).(GovernanceRuleMetadataResponsePtrOutput)
}

// Resource name
func (o LookupManagementGroupGovernanceRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The owner source for the governance rule - e.g. Manually by user@contoso.com - see example
func (o LookupManagementGroupGovernanceRuleResultOutput) OwnerSource() GovernanceRuleOwnerSourceResponseOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) GovernanceRuleOwnerSourceResponse {
		return v.OwnerSource
	}).(GovernanceRuleOwnerSourceResponseOutput)
}

// Governance rule remediation timeframe - this is the time that will affect on the grace-period duration e.g. 7.00:00:00 - means 7 days
func (o LookupManagementGroupGovernanceRuleResultOutput) RemediationTimeframe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) *string { return v.RemediationTimeframe }).(pulumi.StringPtrOutput)
}

// The governance rule priority, priority to the lower number. Rules with the same priority on the same subscription will not be allowed
func (o LookupManagementGroupGovernanceRuleResultOutput) RulePriority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) int { return v.RulePriority }).(pulumi.IntOutput)
}

// The rule type of the governance rule, defines the source of the rule e.g. Integrated
func (o LookupManagementGroupGovernanceRuleResultOutput) RuleType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) string { return v.RuleType }).(pulumi.StringOutput)
}

// The governance rule source, what the rule affects, e.g. Assessments
func (o LookupManagementGroupGovernanceRuleResultOutput) SourceResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) string { return v.SourceResourceType }).(pulumi.StringOutput)
}

// The tenantId (GUID)
func (o LookupManagementGroupGovernanceRuleResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) string { return v.TenantId }).(pulumi.StringOutput)
}

// Resource type
func (o LookupManagementGroupGovernanceRuleResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagementGroupGovernanceRuleResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupManagementGroupGovernanceRuleResultOutput{})
}
